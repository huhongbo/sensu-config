#!/usr/bin/env ruby
#
# System Cpu others
# ===
# code dn365

require 'rubygems' if RUBY_VERSION < '1.9.0'
require 'sensu-plugin/metric/cli'
require 'socket'
require 'sigar'

class SystemCpuUsed < Sensu::Plugin::Metric::CLI::Graphite

  option :scheme,
    :description => "Metric naming scheme, text to prepend to .$parent.$child",
    :long => "--scheme SCHEME",
    :default => "#{Socket.gethostname}.cpu"
    
  def sprintf_int(num)
    sprintf("%.0f", num*100)
  end
  
  def memd_percent(memory_value)
    memd = Sigar.new.mem
    memd_total = memd.total.to_f / 1024
    value = sprintf_int(memory_value.to_f / memd_total.to_f)
  end

  def run
    dname = "system"
    u_dir = "users"
    if %x[uname].include?("HP-UX")
        ps = %x[UNIX95=1 ps -Ax -o pid,pcpu,user,vsz | grep -v PID]
    elsif %x[uname].include?("AIX")
        ps = %x[ps -eo pid,pcpu,user,rssize | grep -v PID]
    elsif %x[uname].include?("Linux")
        ps = %x[ps -eo pid,pcpu,user,vsz | grep -v PID]
    end    
    user_arry = []
    ps.each_line do |pp|
      user_arry << pp.split(" ")[2]
    end
    user = user_arry.uniq
    user.each do |name|
      count, cpu_total, mem_total = 0, 0, 0
      ps.each_line do |pp|
        if pp.split(" ")[2] == name
          count += 1
          cpu_total += pp.split(" ")[1].to_i
          mem_total += pp.split(" ")[3].to_i
        end
      end
            
      timestamp = Time.now.to_i  
      mate = {
        :"#{name}" => {
          :cpu_total => cpu_total,
          :mem_total => memd_percent(mem_total),
          :count => count
        }
      }
      mate.each do |parent,children|
        children.each do |child,value|
          output [<% if node["system"] == nil %>"Zmcc",<% else %><% unless node["system"]["Business"] != nil %>"Zmcc", <% else %>"<%= node["system"]["Business"] %>",<% end %><% end %>config[:scheme], dname, u_dir, parent, child].join("."), value, timestamp
        end
      end
    end  
    ok
  end
end

