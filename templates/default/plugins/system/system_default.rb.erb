#!/usr/bin/env ruby
# system default plugin
# fix cup idle value
# code dn365

require 'rubygems' if RUBY_VERSION < '1.9.0'
require 'sensu-plugin/metric/cli'
require 'socket'
require 'sigar'

class SystemDefaultGraphite < Sensu::Plugin::Metric::CLI::Graphite

  option :scheme,
    :description => "Metric naming scheme, text to prepend to metric",
    :short => "-s SCHEME",
    :long => "--scheme SCHEME",
    :default => "#{Socket.gethostname}.system.system"
    
  def sprintf_int(num)
    sprintf("%.0f", num*100)
  end
  
  def convert_integers(values)
    values.each_with_index do |value, index|
      begin
        converted = Integer(value)
        values[index] = converted
      rescue ArgumentError
      end
    end
    values
  end

  def run
    dname = "system"   
    sigar = Sigar.new
    sys_info = sigar.sys_info.name.downcase

    cpu, mem, swap = sigar.cpu, sigar.mem, sigar.swap     
    cpu_user, cpu_sys, cpu_wait, cpu_total = cpu.user, cpu.sys, cpu.wait, cpu.total   
    sleep 1
    
    cpu_total = sigar.cpu.total - cpu_total
    cpu_user = (sigar.cpu.user - cpu_user).to_f / cpu_total
    cpu_sys = (sigar.cpu.sys - cpu_sys).to_f / cpu_total
    if sys_info == "hpux"
      sar_value = convert_integers(`sar -u 1|tail -n1`.split(" "))
      cpu_wait = sar_value[3]
    else
      cpu_wait = (sigar.cpu.wait - cpu_wait).to_f / cpu_total
      cpu_wait = sprintf_int(cpu_wait)
    end
    cpu_s = sprintf_int(cpu_user).to_i + cpu_wait.to_i + sprintf_int(cpu_sys).to_i
    cup_idle = 100 - cpu_s
    
    memory_used = mem.used.to_f / mem.total.to_f
    memory_sys = (mem.used - mem.actual_used).to_f / mem.total.to_f
    swap_used = swap.used.to_f / swap.total.to_f
    
    timestamp = Time.now.to_i
    metrics = {
      :cpu => {
        :user => sprintf_int(cpu_user),
        :sys =>  sprintf_int(cpu_sys),
        :idle => cup_idle,
        :wait => cpu_wait 
      },
      :memory => {
        :mem_used => sprintf_int(memory_used),
        :mem_sys => sprintf_int(memory_sys),
        :swap_used => sprintf_int(swap_used)
      }
    }
        
    metrics.each do |parent, children|
      children.each do |child, value|
        output [<% if node["system"] == nil %>"Zmcc",<% else %><% unless node["system"]["Business"] != nil %>"Zmcc", <% else %>"<%= node["system"]["Business"] %>",<% end %><% end %>config[:scheme], dname, parent, child].join("."), value, timestamp
      end
    end
    ok  
  end
end
